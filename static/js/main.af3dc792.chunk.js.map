{"version":3,"sources":["Components/LandingPage.js","Components/Bio.js","Components/RepoCards.js","Components/LoadingAnimation.js","Components/Error.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","useState","userName","setUsername","className","onSubmit","e","preventDefault","apiCall","history","push","htmlFor","name","type","value","placeholder","onChange","target","Bio","avatar_url","html_url","login","location","created_at","public_repos","blog","src","alt","href","format","includes","slice","RepoCards","node_id","description","language","key","LoadingAnimation","App","userInfo","setUserInfo","repoInfo","setRepoInfo","isLoading","setIsLoading","results","setResults","a","response","axios","get","data","repos","languagesArray","map","repo","languagesObject","reduce","obj","null","languageNames","Object","keys","languageTotals","values","array","j","x","i","length","parseInt","Math","random","shuffle","languageColors","color","replace","console","log","ctx","document","getElementById","Chart","labels","datasets","backgroundColor","borderColor","options","legend","position","basename","process","exact","path","component","onClick","to","user","id","height","width","Error","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2PAwCeA,eApCK,SAACC,GAAW,IAAD,EAEGC,mBAAS,IAFZ,mBAEtBC,EAFsB,KAEZC,EAFY,KAgB7B,OACE,gCACE,yBAAKC,UAAU,qBACb,kBAAC,IAAD,MACA,0CAEF,0BAAMC,SAlBW,SAACC,GACpBA,EAAEC,iBACFP,EAAMQ,QAAQN,GAEdF,EAAMS,QAAQC,KAAK,SACnBP,EAAY,MAcR,2BAAOC,UAAU,UAAUO,QAAQ,YAAnC,yBACA,2BACEC,KAAK,WACLC,KAAK,OACLC,MAAOZ,EACPa,YAAY,wBACZC,SAjBa,SAACV,GACpBH,EAAYG,EAAEW,OAAOH,e,iBCmBVI,EAhCH,SAAC,GAAqF,IAAnFC,EAAkF,EAAlFA,WAAYP,EAAsE,EAAtEA,KAAMQ,EAAgE,EAAhEA,SAAUC,EAAsD,EAAtDA,MAAOC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,KACpF,OACE,yBAAKrB,UAAU,iBACb,yBAAKsB,IAAKP,EAAYQ,IAAKf,IAC3B,4BAAKA,GACL,uBAAGgB,KAAMR,GAAT,IAAqBC,GACrB,yBAAKjB,UAAU,kCACb,yBAAKA,UAAU,6BAEVkB,EAEG,2BAAG,kBAAC,IAAD,MAAH,IAAuBA,GADvB,2BAAG,kBAAC,IAAD,MAAH,iBAGN,2BAAG,kBAAC,IAAD,MAAH,UAA2B,kBAAC,IAAD,CAAQO,OAAO,iBAAiBN,KAG1C,IAAjBC,EACI,uBAAGpB,UAAU,SAAQ,8BAAOoB,GAAoB,uCAChD,uBAAGpB,UAAU,SAAQ,8BAAOoB,GAAoB,yCAIrDC,EAAKK,SAAS,QAEXL,EAAKK,SAAS,YACZ,uBAAGF,KAAI,UAAKH,IAASA,EAAKM,MAAM,IAChC,uBAAGH,KAAI,UAAKH,IAASA,EAAKM,MAAM,IAHlC,uBAAGH,KAAI,gBAAWH,IAASA,KCXxBO,EAbG,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,QAASb,EAAwD,EAAxDA,SAAUR,EAA8C,EAA9CA,KAAMsB,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,SAAUZ,EAAiB,EAAjBA,WACnE,OACE,yBAAKnB,UAAU,YAAYgC,IAAKH,GAC9B,uBAAGL,KAAMR,GAAWR,GACpB,uBAAGR,UAAU,eAAe8B,GAC5B,yBAAK9B,UAAU,2BACb,2BAAI+B,GACJ,2BAAG,kBAAC,IAAD,CAAQN,OAAO,iBAAiBN,OCC5Bc,EARU,WACvB,OACE,yBAAKjC,UAAU,qBACb,kBAAC,IAAD,QCISkC,MARf,WACE,OACE,oCACE,4CCqLSA,EA5KH,WAAO,IAAD,EAEgBrC,mBAAS,IAFzB,mBAETsC,EAFS,KAECC,EAFD,OAGgBvC,mBAAS,IAHzB,mBAGTwC,EAHS,KAGCC,EAHD,OAIkBzC,oBAAS,GAJ3B,mBAIT0C,EAJS,KAIEC,EAJF,OAKc3C,oBAAS,GALvB,mBAKT4C,EALS,KAKAC,EALA,cAUDtC,EAVC,8EAUhB,WAAuBM,GAAvB,6BAAAiC,EAAA,6DAEMC,EAAW,GAFjB,kBAKwBC,IAAMC,IAAN,uCAA0CpC,IALlE,cAKIkC,EAAS,GALb,gBAMwBC,IAAMC,IAAN,uCAA0CpC,EAA1C,WANxB,OAMIkC,EAAS,GANb,OAQIR,EAAY,CAACQ,EAAS,GAAGG,OACzBT,EAAYM,EAAS,GAAGG,MAElBC,EAAQJ,EAAS,GAAGG,KAEtBE,EAAiB,GAErBD,EAAME,KAAI,SAACC,GACTF,EAAe3C,KAAK6C,EAAKpB,oBAGrBqB,EAAkBH,EAAeI,QAAO,SAACC,EAAKH,GAOlD,OALKG,EAAIH,KACPG,EAAIH,GAAQ,GAGdG,EAAIH,KACGG,IACN,KAGoBC,KAEnBC,EAAgBC,OAAOC,KAAKN,GAC5BO,EAAiBF,OAAOG,OAAOR,GAKnCZ,GAAa,GACbE,GAAW,GAEK,SAACmB,GACf,IAAK,IAAIC,EAAGC,EAAGC,EAAIH,EAAMI,OAAQD,EAAGF,EAAII,SAASC,KAAKC,SAAWJ,GAC/DD,EAAIF,IAAQG,GAAIH,EAAMG,GAAKH,EAAMC,GAAID,EAAMC,GAAKC,GAClD,OAAOF,EAMTQ,CAFMC,EAAiB,CAAC,0BAA2B,0BAA2B,0BAA2B,yBAA0B,yBAA0B,0BAA2B,0BAA2B,2BAA4B,0BAA2B,4BAK1QA,EAAepB,KAAI,SAACqB,GAElBA,EAAQA,EAAMC,QADA,OACe,GAC7BC,QAAQC,IAAIH,MAGRI,EAAMC,SAASC,eAAe,iBACpC,IAAIC,QAAMH,EAAK,CACblE,KAAM,MACNsC,KAAM,CACJgC,OAAQvB,EACRwB,SAAU,CACR,CACEjC,KAAMY,EACNsB,gBAAiBX,EACjBY,YAAaZ,KAInBa,QAAS,CACPC,OAAQ,CACNC,SAAU,YA1EpB,kDAgFI7C,GAAa,GACbE,GAAW,GAjFf,2DAVgB,sBAgGhB,OACE,kBAAC,IAAD,CAAe4C,SAAUC,cACvB,oCACE,yBAAKvF,UAAU,WACb,kBAAC,IAAD,CAAOwF,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAM,kBAAC,EAAD,CAAatF,QAASA,OAC7D,kBAAC,IAAD,CAAOoF,OAAK,EAACC,KAAK,SAEdlD,EAEI,6BACE,kBAAC,IAAD,CAAMoD,QAAS,kBAAMnD,GAAa,IAAOxC,UAAU,cAAc4F,GAAG,KAAI,kBAAC,IAAD,MAAxE,gBACA,kBAAC,EAAD,OAGDnD,EAOC,8BACA,iCACE,kBAAC,IAAD,CAAMkD,QAAS,kBAAMnD,GAAa,IAAOxC,UAAU,cAAc4F,GAAG,KAAI,kBAAC,IAAD,MAAxE,gBACA,yBAAK5F,UAAU,uBAEXmC,EAASe,KAAI,SAAC2C,GACZ,OACE,kBAAC,EAAD,CACE9E,WAAY8E,EAAK9E,WACjBP,KAAMqF,EAAKrF,KACXQ,SAAU6E,EAAK7E,SACfC,MAAO4E,EAAK5E,MACZC,SAAU2E,EAAK3E,SACfC,WAAY0E,EAAK1E,WACjBC,aAAcyE,EAAKzE,aACnBC,KAAMwE,EAAKxE,UAMnB,yBAAKrB,UAAU,mBACb,6CACA,4BAAQ8F,GAAG,gBAAgBC,OAAO,MAAMC,MAAM,WAIpD,iCACE,4CACA,yBAAKhG,UAAU,kBAEXqC,EAASa,KAAI,SAACC,GACZ,OACE,kBAAC,EAAD,CACEtB,QAASsB,EAAKtB,QACdb,SAAUmC,EAAKnC,SACfR,KAAM2C,EAAK3C,KACXsB,YAAaqB,EAAKrB,YAClBC,SAAUoB,EAAKpB,SACfZ,WAAYgC,EAAKhC,mBA5C7B,6BACE,kBAAC,IAAD,CAAMwE,QAAS,kBAAMnD,GAAa,IAAOxC,UAAU,cAAc4F,GAAG,KAAI,kBAAC,IAAD,MAAxE,gBACA,kBAACK,EAAD,YCpHFC,QACW,cAA7BC,OAAOjF,SAASkF,UAEe,UAA7BD,OAAOjF,SAASkF,UAEhBD,OAAOjF,SAASkF,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAASC,eAAe,SDyHpB,kBAAmB4B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.af3dc792.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { DiGithubBadge } from 'react-icons/di';\r\n\r\nconst LandingPage = (props) => {\r\n\r\n  const [userName, setUsername] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    props.apiCall(userName);\r\n    // props.history is identically to using a redirect, depending on a certain state in the return\r\n    props.history.push('/user');\r\n    setUsername('');\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setUsername(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <header>\r\n      <div className=\"icon-h1-container\">\r\n        <DiGithubBadge />\r\n        <h1>Git Check</h1>\r\n      </div>\r\n      <form onSubmit={handleSubmit}>\r\n        <label className=\"sr-only\" htmlFor=\"username\">Enter GitHub username</label>\r\n        <input\r\n          name=\"username\"\r\n          type=\"text\"\r\n          value={userName}\r\n          placeholder='Enter GitHub username'\r\n          onChange={handleChange}\r\n        />\r\n      </form>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default withRouter(LandingPage);\r\n","import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport { FaMapMarkerAlt, FaCalendarAlt } from 'react-icons/fa';\r\n\r\nconst Bio = ({ avatar_url, name, html_url, login, location, created_at, public_repos, blog }) => {\r\n  return (\r\n    <div className=\"bio-container\">\r\n      <img src={avatar_url} alt={name} />\r\n      <h2>{name}</h2>\r\n      <a href={html_url}>@{login}</a>\r\n      <div className=\"location-joined-repo-container\">\r\n        <div className=\"location-joined-container\">\r\n          {\r\n            !location\r\n              ? <p><FaMapMarkerAlt /> Planet Earth</p>\r\n              : <p><FaMapMarkerAlt /> {location}</p>\r\n          }\r\n          <p><FaCalendarAlt />Joined <Moment format=\"MMMM DD, YYYY\">{created_at}</Moment></p>\r\n        </div>\r\n        {\r\n          public_repos === 1\r\n            ? <p className=\"repos\"><span>{public_repos}</span><span>Repo</span></p>\r\n            : <p className=\"repos\"><span>{public_repos}</span><span>Repos</span></p>\r\n        }\r\n      </div>\r\n      {\r\n        !blog.includes('http')\r\n          ? <a href={`https:${blog}`}>{blog}</a>\r\n          : blog.includes('https://')\r\n            ? <a href={`${blog}`}>{blog.slice(8)}</a>\r\n            : <a href={`${blog}`}>{blog.slice(7)}</a>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bio;\r\n","import React from 'react';\r\nimport Moment from 'react-moment';\r\n\r\nconst RepoCards = ({ node_id, html_url, name, description, language, created_at }) => {\r\n  return (\r\n    <div className=\"repo-card\" key={node_id}>\r\n      <a href={html_url}>{name}</a>\r\n      <p className=\"description\">{description}</p>\r\n      <div className=\"language-date-container\">\r\n        <p>{language}</p>\r\n        <p><Moment format=\"MMMM DD, YYYY\">{created_at}</Moment></p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RepoCards;\r\n","import React from 'react';\r\nimport { DiGithubBadge } from 'react-icons/di';\r\n\r\nconst LoadingAnimation = () => {\r\n  return (\r\n    <div className=\"loading-container\">\r\n      <DiGithubBadge />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoadingAnimation\r\n","import React from 'react';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <h1>No results</h1>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React, { useState } from 'react';\r\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport { FaArrowLeft } from 'react-icons/fa';\r\nimport './index.scss';\r\n\r\n// Components\r\nimport LandingPage from './Components/LandingPage';\r\nimport Bio from './Components/Bio';\r\nimport RepoCards from './Components/RepoCards';\r\nimport LoadingAnimation from './Components/LoadingAnimation';\r\nimport Error from './Components/Error';\r\n\r\nconst App = () => {\r\n\r\n  const [userInfo, setUserInfo] = useState({});\r\n  const [repoInfo, setRepoInfo] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [results, setResults] = useState(false)\r\n  // const [languageNames, setLanguageNames] = useState([]);\r\n  // const [languageTotals, setLanguageTotals] = useState([]);\r\n  // const [languageColors, setLanguageColors] = useState([])\r\n\r\n  async function apiCall(value) {\r\n\r\n    let response = [];\r\n\r\n    try {\r\n      response[0] = await axios.get(`https://api.github.com/users/${value}`);\r\n      response[1] = await axios.get(`https://api.github.com/users/${value}/repos`);\r\n\r\n      setUserInfo([response[0].data]);\r\n      setRepoInfo(response[1].data);\r\n\r\n      const repos = response[1].data;\r\n\r\n      let languagesArray = [];\r\n\r\n      repos.map((repo) => {\r\n        languagesArray.push(repo.language);\r\n      })\r\n\r\n      const languagesObject = languagesArray.reduce((obj, repo) => {\r\n        // if we do not have that property, add it with the value of 0\r\n        if (!obj[repo]) {\r\n          obj[repo] = 0;\r\n        }\r\n        // if we do have that property, add one to the value\r\n        obj[repo]++;\r\n        return obj;\r\n      }, {})\r\n\r\n      // remove languages that are not specified\r\n      delete languagesObject.null;\r\n\r\n      let languageNames = Object.keys(languagesObject);\r\n      let languageTotals = Object.values(languagesObject);\r\n\r\n      // setLanguageNames(languageNames);\r\n      // setLanguageTotals(languageTotals);\r\n\r\n      setIsLoading(false);\r\n      setResults(true);\r\n\r\n      const shuffle = (array) => {\r\n        for (let j, x, i = array.length; i; j = parseInt(Math.random() * i),\r\n          x = array[--i], array[i] = array[j], array[j] = x);\r\n        return array;\r\n      };\r\n\r\n\r\n      const languageColors = ['rgba(75, 137, 208, 0.7)', 'rgba(134, 83, 196, 0.7)', 'rgba(203, 84, 182, 0.7)', 'rgba(203, 76, 76, 0.7)', 'rgba(45, 59, 143, 0.7)', 'rgba(227, 213, 50, 0.7)', 'rgba(46, 210, 150, 0.7)', 'rgba(140, 195, 212, 0.7)', 'rgba(207, 114, 46, 0.7)', 'rgba(137, 206, 48, 0.7)'];\r\n\r\n      shuffle(languageColors);\r\n\r\n      // const borderColors =\r\n      languageColors.map((color) => {\r\n        const alpha = /0.7/g\r\n        color = color.replace(alpha, 1);\r\n        console.log(color);\r\n      })\r\n\r\n      const ctx = document.getElementById('top-languages');\r\n      new Chart(ctx, {\r\n        type: \"pie\",\r\n        data: {\r\n          labels: languageNames,\r\n          datasets: [\r\n            {\r\n              data: languageTotals,\r\n              backgroundColor: languageColors,\r\n              borderColor: languageColors,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          legend: {\r\n            position: 'right',\r\n          },\r\n        }\r\n      });\r\n\r\n    } catch (err) {\r\n      setIsLoading(false);\r\n      setResults(false);\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <>\r\n        <div className=\"wrapper\">\r\n          <Route exact path=\"/\" component={() => <LandingPage apiCall={apiCall} />} />\r\n          <Route exact path=\"/user\">\r\n            {\r\n              isLoading\r\n                ? (\r\n                  <div>\r\n                    <Link onClick={() => setIsLoading(true)} className=\"back-button\" to=\"/\"><FaArrowLeft />Search again</Link>\r\n                    <LoadingAnimation />\r\n                  </div>\r\n                )\r\n                : !results\r\n                  ? (\r\n                    <div>\r\n                      <Link onClick={() => setIsLoading(true)} className=\"back-button\" to=\"/\"><FaArrowLeft />Search again</Link>\r\n                      <Error />\r\n                    </div>\r\n                  )\r\n                  : <main>\r\n                    <section>\r\n                      <Link onClick={() => setIsLoading(true)} className=\"back-button\" to=\"/\"><FaArrowLeft />Search again</Link>\r\n                      <div className=\"bio-chart-container\">\r\n                        {\r\n                          userInfo.map((user) => {\r\n                            return (\r\n                              <Bio\r\n                                avatar_url={user.avatar_url}\r\n                                name={user.name}\r\n                                html_url={user.html_url}\r\n                                login={user.login}\r\n                                location={user.location}\r\n                                created_at={user.created_at}\r\n                                public_repos={user.public_repos}\r\n                                blog={user.blog}\r\n\r\n                              />\r\n                            )\r\n                          })\r\n                        }\r\n                        <div className=\"chart-container\">\r\n                          <h3>Top Languages</h3>\r\n                          <canvas id=\"top-languages\" height=\"350\" width=\"410\" />\r\n                        </div>\r\n                      </div>\r\n                    </section>\r\n                    <section>\r\n                      <h3>Repositories</h3>\r\n                      <div className=\"repo-container\">\r\n                        {\r\n                          repoInfo.map((repo) => {\r\n                            return (\r\n                              <RepoCards\r\n                                node_id={repo.node_id}\r\n                                html_url={repo.html_url}\r\n                                name={repo.name}\r\n                                description={repo.description}\r\n                                language={repo.language}\r\n                                created_at={repo.created_at}\r\n                              />\r\n                            )\r\n                          })\r\n                        }\r\n                      </div>\r\n                    </section>\r\n                  </main>\r\n            }\r\n          </Route>\r\n        </div>\r\n      </>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}