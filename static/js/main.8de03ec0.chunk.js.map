{"version":3,"sources":["firebase.js","Components/LandingPage.js","Components/Bio.js","Components/RepoCards.js","Components/LoadingAnimation.js","Components/Error.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","withRouter","props","useState","userName","setUsername","to","className","onSubmit","e","preventDefault","apiCall","history","push","htmlFor","name","type","value","placeholder","aria-label","onChange","target","Bio","avatar_url","html_url","login","location","created_at","public_repos","blog","src","alt","title","href","format","includes","slice","RepoCards","node_id","description","language","key","LoadingAnimation","Error","App","userInfo","setUserInfo","repoInfo","setRepoInfo","isLoading","setIsLoading","results","setResults","favoriteUserName","setFavoriteUserName","imgFavorite","setImgFavorite","locationFavorite","setLocationFavorite","nameFavoritesArray","setNameFavouritesArray","totalFavorites","setTotalFavorites","noLanguages","setNoLanguages","a","response","axios","get","data","repos","languagesArray","map","repo","languagesObject","reduce","obj","null","languageNames","Object","keys","languageTotals","values","array","j","x","i","length","parseInt","Math","random","shuffle","languageColors","color","replace","ctx","document","getElementById","Chart","labels","datasets","backgroundColor","borderColor","options","legend","position","useEffect","database","ref","on","newState","val","userObj","userNameArray","favouriteApiCall","closest","firstChild","textContent","back","basename","process","exact","path","component","onClick","user","toLowerCase","profilePicture","id","height","width","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8de03ec0.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/database';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAc5SQb2J_Com0SR-h87--MMcpU1-5_LNo\",\r\n  authDomain: \"git-check.firebaseapp.com\",\r\n  databaseURL: \"https://git-check.firebaseio.com\",\r\n  projectId: \"git-check\",\r\n  storageBucket: \"git-check.appspot.com\",\r\n  messagingSenderId: \"901012305489\",\r\n  appId: \"1:901012305489:web:95b8925a2689899f2d6a70\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { useState } from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\n\r\n// icons\r\nimport { DiGithubBadge } from 'react-icons/di';\r\nimport { FaStar } from 'react-icons/fa'\r\n\r\nconst LandingPage = (props) => {\r\n\r\n  const [userName, setUsername] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    props.apiCall(userName);\r\n    // props.history is identically to using a redirect, depending on a certain state in the return\r\n    props.history.push('/user');\r\n    setUsername('');\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setUsername(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <header>\r\n      <nav>\r\n        <Link to=\"/favorites\" className=\"button\"><FaStar />Favorites</Link>\r\n      </nav>\r\n      <div className=\"icon-h1-container\">\r\n        <DiGithubBadge />\r\n        <h1>Git Check</h1>\r\n      </div>\r\n      <form onSubmit={handleSubmit}>\r\n        <label className=\"sr-only\" htmlFor=\"username\">Enter GitHub username</label>\r\n        <input\r\n          name=\"username\"\r\n          type=\"text\"\r\n          value={userName}\r\n          placeholder=\"Enter GitHub username\"\r\n          aria-label=\"Enter GitHub username\"\r\n          onChange={handleChange}\r\n        />\r\n      </form>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default withRouter(LandingPage);\r\n","import React from 'react';\r\nimport Moment from 'react-moment';\r\n\r\n// icons\r\nimport { FaMapMarkerAlt, FaCalendarAlt } from 'react-icons/fa';\r\n\r\nconst Bio = ({ avatar_url, name, html_url, login, location, created_at, public_repos, blog }) => {\r\n  return (\r\n    <div className=\"bio-container\">\r\n      <img src={avatar_url} alt={name} />\r\n      <h2>{name}</h2>\r\n      <a title=\"View GitHub profile\" href={html_url}>@{login}</a>\r\n      <div className=\"location-joined-repo-container\">\r\n        <div className=\"location-joined-container\">\r\n          {\r\n            !location\r\n              ? <p><FaMapMarkerAlt /> Planet Earth</p>\r\n              : <p><FaMapMarkerAlt /> {location}</p>\r\n          }\r\n          <p><FaCalendarAlt />Joined <Moment format=\"MMMM DD, YYYY\">{created_at}</Moment></p>\r\n        </div>\r\n        {\r\n          public_repos === 1\r\n            ? <p className=\"repos\"><span>{public_repos}</span><span>Repo</span></p>\r\n            : <p className=\"repos\"><span>{public_repos}</span><span>Repos</span></p>\r\n        }\r\n      </div>\r\n      {\r\n        !blog.includes('http')\r\n          ? <a href={`https:${blog}`} title=\"View personal website\">{blog}</a>\r\n          : blog.includes('https://')\r\n            ? <a href={`${blog}`} title=\"View personal website\">{blog.slice(8)}</a>\r\n            : <a href={`${blog}`} title=\"View personal website\">{blog.slice(7)}</a>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bio;\r\n","import React from 'react';\r\nimport Moment from 'react-moment';\r\n\r\nconst RepoCards = ({ node_id, html_url, name, description, language, created_at }) => {\r\n  return (\r\n    <div className=\"repo-card\" key={node_id}>\r\n      <h4><a title=\"View repository\" href={html_url}>{name}</a></h4>\r\n      <p className=\"description\">{description}</p>\r\n      <div className=\"language-date-container\">\r\n        <p>{language}</p>\r\n        <p><Moment format=\"MMMM DD, YYYY\">{created_at}</Moment></p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RepoCards;\r\n","import React from 'react';\r\nimport { DiGithubBadge } from 'react-icons/di';\r\n\r\nconst LoadingAnimation = () => {\r\n  return (\r\n    <div className=\"loading-container\">\r\n      <DiGithubBadge />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoadingAnimation\r\n","import React from 'react';\r\n\r\n// icons\r\nimport { FaExclamationTriangle } from 'react-icons/fa'\r\n\r\nconst Error = () => {\r\n  return (\r\n    <div className=\"error-container\">\r\n      <FaExclamationTriangle />\r\n      <h3>That must not be a real GitHub user!</h3>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Error;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport firebase from './firebase';\r\nimport { Chart } from 'react-chartjs-2';\r\n\r\n// icons\r\nimport { FaArrowLeft, FaStar } from 'react-icons/fa';\r\nimport { DiGithubBadge } from 'react-icons/di';\r\n\r\nimport './index.scss';\r\n\r\n// components\r\nimport LandingPage from './Components/LandingPage';\r\nimport Bio from './Components/Bio';\r\nimport RepoCards from './Components/RepoCards';\r\nimport LoadingAnimation from './Components/LoadingAnimation';\r\nimport Error from './Components/Error';\r\n\r\nconst App = () => {\r\n\r\n  // GitHub APIS\r\n  const [userInfo, setUserInfo] = useState({});\r\n  const [repoInfo, setRepoInfo] = useState([]);\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [results, setResults] = useState(false);\r\n\r\n  // Firebase\r\n  const [favoriteUserName, setFavoriteUserName] = useState('');\r\n  const [imgFavorite, setImgFavorite] = useState('');\r\n  const [locationFavorite, setLocationFavorite] = useState('');\r\n\r\n  const [nameFavoritesArray, setNameFavouritesArray] = useState([]);\r\n  const [totalFavorites, setTotalFavorites] = useState([]);\r\n  const [noLanguages, setNoLanguages] = useState(false);\r\n\r\n\r\n  async function apiCall(value) {\r\n\r\n    let response = [];\r\n\r\n    try {\r\n      response[0] = await axios.get(`https://api.github.com/users/${value}`);\r\n      response[1] = await axios.get(`https://api.github.com/users/${value}/repos`);\r\n\r\n      setUserInfo([response[0].data]);\r\n      setRepoInfo(response[1].data);\r\n\r\n      setImgFavorite(response[0].data.avatar_url);\r\n\r\n      // if location is null, set it to Planet Earth\r\n      if (response[0].data.location !== null) {\r\n        setLocationFavorite(response[0].data.location);\r\n      } else {\r\n        setLocationFavorite('Planet Earth');\r\n      }\r\n\r\n      const repos = response[1].data;\r\n\r\n      let languagesArray = [];\r\n\r\n      repos.map((repo) => {\r\n        return languagesArray.push(repo.language);\r\n      })\r\n\r\n      const languagesObject = languagesArray.reduce((obj, repo) => {\r\n        // if we do not have that property, add it with the value of 0\r\n        if (!obj[repo]) {\r\n          obj[repo] = 0;\r\n        }\r\n        // if we do have that property, add one to the value\r\n        obj[repo]++;\r\n        return obj;\r\n      }, {})\r\n\r\n      // remove languages that are not specified\r\n      delete languagesObject.null;\r\n\r\n      let languageNames = Object.keys(languagesObject);\r\n      let languageTotals = Object.values(languagesObject);\r\n\r\n      setIsLoading(false);\r\n      setResults(true);\r\n      setNoLanguages(false);\r\n      setFavoriteUserName(value);\r\n\r\n      // fisher-yates shuffle\r\n      const shuffle = (array) => {\r\n        for (let j, x, i = array.length; i; j = parseInt(Math.random() * i),\r\n          x = array[--i], array[i] = array[j], array[j] = x);\r\n        return array;\r\n      };\r\n\r\n      const languageColors = [\r\n        'rgba(75, 137, 208, 0.7)',\r\n        'rgba(134, 83, 196, 0.7)',\r\n        'rgba(203, 84, 182, 0.7)',\r\n        'rgba(203, 76, 76, 0.7)',\r\n        'rgba(45, 59, 143, 0.7)',\r\n        'rgba(227, 213, 50, 0.7)',\r\n        'rgba(46, 210, 150, 0.7)',\r\n        'rgba(140, 195, 212, 0.7)',\r\n        'rgba(207, 114, 46, 0.7)',\r\n        'rgba(137, 206, 48, 0.7)'\r\n      ];\r\n\r\n      shuffle(languageColors);\r\n\r\n      // add .3 opacity to each languageColor for their individual border\r\n      languageColors.map((color) => {\r\n        const alpha = /0.7/g\r\n        color = color.replace(alpha, 1);\r\n        return color;\r\n      })\r\n\r\n      const ctx = document.getElementById('top-languages');\r\n      new Chart(ctx, {\r\n        type: \"pie\",\r\n        data: {\r\n          labels: languageNames,\r\n          datasets: [\r\n            {\r\n              data: languageTotals,\r\n              backgroundColor: languageColors,\r\n              borderColor: languageColors,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          legend: {\r\n            position: 'right',\r\n          },\r\n        }\r\n      });\r\n\r\n      // if there is no languages, don't show chart\r\n      if (languageNames.length === 0) {\r\n        setNoLanguages(true);\r\n      }\r\n\r\n\r\n    } catch (err) {\r\n      setIsLoading(false);\r\n      setResults(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.on('value', (response) => {\r\n\r\n      const newState = [];\r\n      const data = response.val();\r\n\r\n      // pushing the key for the index and userObj for user information into the newState array\r\n      for (let key in data) {\r\n        newState.push({\r\n          key: key,\r\n          userObj: data[key],\r\n        });\r\n      }\r\n\r\n      setTotalFavorites(newState);\r\n\r\n      let userNameArray = [];\r\n\r\n      // pushing all favourite usernames into an array\r\n      newState.map((userName) => {\r\n\r\n        userNameArray.push(userName.userObj.name);\r\n        setNameFavouritesArray(userNameArray);\r\n\r\n      })\r\n\r\n    });\r\n\r\n  }, []);\r\n\r\n\r\n  const handleFavorite = () => {\r\n\r\n    // checking for duplicate favorites\r\n    if (nameFavoritesArray.includes(favoriteUserName) === false) {\r\n\r\n      const user = {\r\n        name: favoriteUserName.toLowerCase(),\r\n        profilePicture: imgFavorite,\r\n        location: locationFavorite,\r\n      }\r\n\r\n      const dbRef = firebase.database().ref();\r\n      dbRef.push(user);\r\n\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  const favouriteApiCall = (e) => {\r\n    // target the closest child (h3), grab the text content and remove the first character (@)\r\n    const userName = e.target.closest('.user-card').firstChild.textContent.slice(1);\r\n    // making another api call instead of storing all favourite user info into firebase when you favourite to show most up-to-date GitHub stats\r\n    apiCall(userName);\r\n  }\r\n\r\n  const back = () => {\r\n    !isLoading\r\n      ? setIsLoading(true)\r\n      : setIsLoading(false)\r\n  }\r\n\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <>\r\n        <div className=\"wrapper\">\r\n          <Route exact path=\"/\" component={() => <LandingPage apiCall={apiCall} />} />\r\n          <Route exact path=\"/user\">\r\n            {\r\n              isLoading\r\n                ? (\r\n                  <>\r\n                    <nav>\r\n                      <Link onClick={back} className=\"button\" to=\"/\" className=\"button\"><FaArrowLeft />Search again</Link>\r\n                    </nav>\r\n                    <LoadingAnimation />\r\n                  </>\r\n                )\r\n                : !results\r\n                  ? (\r\n                    <>\r\n                      <nav>\r\n                        <Link onClick={back} className=\"button\" to=\"/\" className=\"button\"><FaArrowLeft />Search again</Link>\r\n                      </nav>\r\n                      <Error />\r\n                    </>\r\n                  )\r\n                  : <main>\r\n                    <section>\r\n                      <ul className=\"favorite-back-container\">\r\n                        <li><button className=\"button\" onClick={handleFavorite} aria-label=\"Favorite this user\" title=\"Favorite this user\"><FaStar /></button></li>\r\n                        <li><Link onClick={back} to=\"/\" className=\"button\"><FaArrowLeft />Search again</Link></li>\r\n                      </ul>\r\n                      <div className=\"bio-chart-container\">\r\n                        {\r\n                          userInfo.map((user) => {\r\n                            return (\r\n                              <Bio\r\n                                key={user.id}\r\n                                avatar_url={user.avatar_url}\r\n                                name={user.name}\r\n                                html_url={user.html_url}\r\n                                login={user.login}\r\n                                location={user.location}\r\n                                created_at={user.created_at}\r\n                                public_repos={user.public_repos}\r\n                                blog={user.blog}\r\n                              />\r\n                            )\r\n                          })\r\n                        }\r\n                        <div className=\"chart-container\">\r\n                          <h3>Top Languages</h3>\r\n                          {\r\n                            !noLanguages\r\n                              ? <canvas id=\"top-languages\" height=\"350\" width=\"410\" />\r\n                              : <p>Nothing to see here!</p>\r\n                          }\r\n                        </div>\r\n                      </div>\r\n                    </section>\r\n                    <section>\r\n                      <h3>Repositories</h3>\r\n                      <div className=\"repo-container\">\r\n                        {\r\n                          repoInfo.map((repo) => {\r\n                            return (\r\n                              <RepoCards\r\n                                key={repo.id}\r\n                                node_id={repo.node_id}\r\n                                html_url={repo.html_url}\r\n                                name={repo.name}\r\n                                description={repo.description}\r\n                                language={repo.language}\r\n                                created_at={repo.created_at}\r\n                              />\r\n                            )\r\n                          })\r\n                        }\r\n                      </div>\r\n                    </section>\r\n                  </main>\r\n            }\r\n          </Route>\r\n          <Route exact path='/favorites'>\r\n            <nav>\r\n              <Link onClick={back} className=\"button\" to=\"/\" className=\"button\"><FaArrowLeft />Search again</Link>\r\n            </nav>\r\n            <section className=\"user-card-container\">\r\n              {\r\n                totalFavorites.map((user) => {\r\n                  return (\r\n                    <div key={user.key} className=\"user-card\">\r\n                      <ul className=\"img-h4-container\">\r\n                        <li><img src={user.userObj.profilePicture} alt={user.userObj.name} /></li>\r\n                        <li><h4>@{user.userObj.name}</h4></li>\r\n                      </ul>\r\n                      <ul className=\"date-link-container\">\r\n                        <li><p>{user.userObj.location}</p></li>\r\n                        <li><Link onClick={favouriteApiCall} to=\"/user\" aria-label=\"View user stats\" title=\"View user stats\"><DiGithubBadge /></Link></li>\r\n                      </ul>\r\n                    </div>\r\n                  )\r\n                })\r\n              }\r\n            </section>\r\n          </Route>\r\n        </div>\r\n      </>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}